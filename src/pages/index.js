import React from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { useState, useEffect, useCallback } from 'react';
import { useStore, useDispatch, connect } from 'react-redux';
import styled from 'styled-components';
import _ from 'lodash';

import {
  getMinutesGapFromMillionseconds,
  getHumanReadableTimerBySecond,
  fetchAPI,
  isBrowserMode,
  showModal,
  FRAME_GAP,
  INVALID_TIME_VALUE,
} from '../lib';
import {
  getLogger
} from '../lib/logger';
import {
  SET_TIME,
  UNSET_TIME,
  CHECK_OR_UPDATE_TERMINATE,
} from '../lib/actions';
import {
  Wrapper,
  Layout,
  SectionTitle,
  SectionContainer,
  Button,
  HorizontalStretch,
  Input,
} from '../components';
import {
  HurrayModal,
} from '../components/HurrayModal';
import {
  AlertModal,
} from '../components/AlertModal';
import {
  UserList,
} from '../components/UserList';

import styles from '../styles/Home.module.css'

const logger = getLogger();

const TimerWrapper = styled.div`
  display: flex;
  justify-content: center;
  flex: 1;
  position: relative;

  &.timer {
    color: #313fde;
    align-items: center;
    font-size: 150px;

    @media only screen and (max-width: 800px) {
      font-size: 75px;
    }

    font-size: 10vw; // compatible style "00:00:00" (length: 8), if your browser do support "vw/vh"
  }
`;

const LotteryPage = React.memo(({ time: initTime, users }) => {
  const now = Date.now();
  const timeValue = getHumanReadableTimerBySecond({ value: initTime - now, formatter: value => value / 1000 });
  const store = useStore();
  // NOTE: Make default UI value to 1 if null found in store
  const [time, setTime] = useState(_.chain(getMinutesGapFromMillionseconds(initTime)).clamp(1, 1440));
  const [currentTimestamp, setCurrentTimestamp] = useState(now);
  const dispatch = useDispatch();

  // NOTE: set-up a timer for this component. to re-perform once user set up a new timer.
  useEffect(() => {
    const iterator = {
      done: initTime === null ? true : false,
      async next() {
        const done = this?.done;
        const now = Date.now();
        !done && setCurrentTimestamp(now);
        await new Promise(res => setTimeout(res, FRAME_GAP));
        return {
          done,
          value: now,
        }
      },
      [Symbol.asyncIterator]() {
        return this;
      }
    }
    const startTimer = async () => {
      for await(let item of iterator) {}
    };
    startTimer();
    return () => {
      // NOTE: make iterator done
      iterator.done = true;
    };
  }, [initTime]);

  // NOTE: modal alert handler
  useEffect(() => {
    const now = Date.now();
    logger.DEBUG('initTime/now', initTime, now);
    if (now >= initTime && initTime !== null) {
      dispatch({ type: UNSET_TIME });
      const user = _.chain(users).sample().value();
      showModal({ component: HurrayModal, props: { user, endTime: initTime } });
    }
  }, [
    timeValue, // NOTE: current page timer tick
    initTime,  // NOTE: set-up timer changed
  ]);

  const onSetTimeBtnClicked = useCallback(async ({ value }) => {
    const time = _.chain(+value).ceil(0).value();
    if (!_.chain(time).clamp(0, 1440).isEqual(time).value()) {
      await showModal({ component: AlertModal, props: { message: INVALID_TIME_VALUE } });
      return;
    }
    dispatch({ type: SET_TIME, payload: { value: time } });
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Treasure picker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Wrapper className="main">
          <SectionTitle className="align-left">抽獎時間</SectionTitle>
          <SectionContainer>
            <Wrapper className="content">
              <Input
                max="1440"
                min="0"
                type="number"
                value={_.chain(time).ceil(0).value()}
                onKeyPress={({ target, code }) =>
                  _.chain(code).isEqual('Enter').thru(value => {
                    value && onSetTimeBtnClicked({ value: time });
                  }).value()}
                onInput={({ target }) => setTime(target?.value)}
              />
              <HorizontalStretch />
              分鐘
              <HorizontalStretch size={30} />
              <Button onClick={() => onSetTimeBtnClicked({ value: time })}>
                設定
              </Button>
            </Wrapper>
            <TimerWrapper className="timer">
              { timeValue }
            </TimerWrapper>
          </SectionContainer>
        </Wrapper>
        <Wrapper className="left-side">
          <SectionTitle>參加抽獎名單</SectionTitle>
          <SectionContainer>
            <UserList users={users} />
          </SectionContainer>
        </Wrapper>
      </Layout>
    </div>
  )
});

LotteryPage.getInitialProps = async ({ req }) => {
  const apiHost = _.chain(req)
    .get('headers.host')
    .value();
  const protcol = _.chain(req)
    .get('httpVersion')
    .isEqual('1.1')
    .thru(value => value ? 'http' : 'https')
    .value();
  const apiEndpoint = isBrowserMode ? '/api/people' : `${protcol}://${apiHost}/api/people`;
  const res = await fetchAPI(apiEndpoint);
  const json = await res.json();
  return { users: json };
};

// NOTE: https://github.com/kirill-konshin/next-redux-wrapper#getserversideprops
export default connect(state => ({
  time: state?.timer?.value,
}))(LotteryPage);
